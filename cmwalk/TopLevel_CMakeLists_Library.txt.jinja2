cmake_minimum_required(VERSION 3.9)

{% if cfg.cmakeToolchainFile %}
# set the toolchain file.
# toolchain file should be set before "project" command.
# the toolchain file can also be set via "cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file".
set(CMAKE_TOOLCHAIN_FILE gcc_arm_none_eabi_toolchain.cmake)

{% endif %}
project({{ project_name }})
enable_language(C CXX ASM)

{% if cfg.cmakeCompilerOptionsFile %}
# load and run the CMake code from the given file to specify project specific options.
include({{ cfg.cmakeCompilerOptionsFile }})

{% endif %}

# export the library target through a variable to CMakeLists.txt files in subdirectories.
# update the dependent sources.

# Configuration for dynamic library
add_library(${PROJECT_NAME} SHARED
{%  if files|length > 0 %}
{% for fname in files %}
    {{ fname }}
{% endfor %}
{% else %}
    ""
{% endif %}
)

if (LINKER_SCRIPT)
	# if linker script is defined, make the target to depends on it,
	# so the target will be rebuilt when linker script was changed.
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_DEPENDS ${LINKER_SCRIPT})
endif()

{% if cfg.includeLibraries|length > 0 %}
{% for include in cfg.includeLibraries %}
# Add external explicit libraries. Such as 'm' for libm (math.h).
target_link_libraries(${PROJECT_NAME} PRIVATE {{ include }})
{% endfor %}
{% else %}
""
{% endif %}


{% if subdirs|length > 0 %}
# export the name of library target via a variable to CMakeLists.txt files in subdirectories.
set(CURRENT_LIB_NAME ${PROJECT_NAME})
# load and run the CMake code from subdirectories for current target.
{% for subdir in subdirs %}
include({{ subdir }}/CMakeLists.txt)
{% endfor %}
{% endif %}


# Configuration for static library
add_library(${PROJECT_NAME}-static
{%  if files|length > 0 %}
{% for fname in files %}
    {{ fname }}
{% endfor %}
{% else %}
    ""
{% endif %}
)

if (LINKER_SCRIPT)
	# if linker script is defined, make the target to depends on it,
	# so the target will be rebuilt when linker script was changed.
    set_target_properties(${PROJECT_NAME}-static PROPERTIES LINK_DEPENDS ${LINKER_SCRIPT})
endif()

{% if cfg.includeLibraries|length > 0 %}
{% for include in cfg.includeLibraries %}
# Add external explicit libraries. Such as 'm' for libm (math.h).
target_link_libraries(${PROJECT_NAME}-static PRIVATE {{ include }})
{% endfor %}
{% else %}
""
{% endif %}


{% if subdirs|length > 0 %}
# export the name of library target via a variable to CMakeLists.txt files in subdirectories.
set(CURRENT_LIB_NAME ${PROJECT_NAME}-static)
# load and run the CMake code from subdirectories for current target.
{% for subdir in subdirs %}
include({{ subdir }}/CMakeLists.txt)
{% endfor %}
{% endif %}